/**
 *  CARDS-FAN
 *  Arrange cards as a fan
 */
 
.cards-fan{
  
  @include noselect;
  @include cardsbox;
  
  //keep iteration limits
  //will only work up to $fan-count cards
  $fan-count: 15;
  
  //radius of fan curve
  $fan-radius: 7em;
  
  //angle range of the fan
  $fan-range: 60deg;
  
  //calculate offset angle to place cards standing up
  $angle-offset: -1 * ( 180deg - .5*$fan-range );
  
  //calculate position offset to keep cards aligned
  //we are ignoring x offset for the sake
  $cx: 0em; $cy: $fan-radius;

  //iterate up to $fan-count times
  //from $i to $n
  @for $n from 1 through $fan-count {
  @for $i from 1 through $n {
        
    //resolve angle for given index $i
    $angle-in-degs: decimal-round( $fan-range/$n * $i ) - $angle-offset;

    //convert to radians for math operations
    $angle-in-rads: rad($angle-in-degs);

    //resolve card offset based on calculated angle
    //$o-x: $cx + decimal-round( $fan-radius * ( $card-width * .5 / 1em ) * sin($angle-in-rads), 2);
    //$o-y: $cy + decimal-round( $fan-radius * ( $card-width * .5 / 1em ) * cos($angle-in-rads), 2);
    $o-x: $cx + decimal-round( $fan-radius * sin($angle-in-rads), 2);
    $o-y: $cy + decimal-round( $fan-radius * cos($angle-in-rads), 2);

    //$i  --> index from the start
    //$ii --> index from the end
    //using nth-child($i) + nth-last-child($ii) combination
    //we can target card indexes based on siblings quantity
    $ii: $n - $i;

    //apply transform for $i/$ii indexes
    .card:nth-child(#{$ii}):nth-last-child(#{$i}){
      //transform: translateX($o-x) translateY($o-y)  rotateZ(180deg - $angle-in-degs);
      transform: translateY($o-y) rotateZ(180deg - $angle-in-degs);
    }

    //reverse modifier
    //as easy as iterate indexes inverted
    &.cards--reverse{
      .card:nth-child(#{$i}):nth-last-child(#{$ii}) {
        //transform: translateX($o-x) translateY($o-y)  rotateZ(180deg - $angle-in-degs);
        transform: translateY($o-y)  rotateZ(180deg - $angle-in-degs);
      }
    }
      
  }
  }
  
  //alignment modifier
  @include cards--align('row',false);
  
  //reverse modifier
  &.cards--reverse{
    @include cards--align('row',true);
  }
  
  //random modifier
  &.cards--random{
    .card {               margin-top: -.35em; }
    .card:nth-child(2n) { margin-top: -.15em; }
    .card:nth-child(3n) { margin-top: .4em; }
    .card:nth-child(5n) { margin-top: .2em; }
  }
  
  //overlap modifier
  &.cards--overlap{
    
    $gutter: .5em;
    
    .card{
      margin-left: -.3*$gutter;
      margin-right: -.3*$gutter;
    }
    
  }

}