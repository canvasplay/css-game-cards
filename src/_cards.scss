.cards{
  @include noselect;
  display: flex;
  align-items: center;
  justify-content: center;
  @include cards--align('row',false);
}


//.cards--row{} by default


.cards--column{
  @include cards--align('column',false);
}

.cards--reverse{
  
  &:not(.cards--column){
    @include cards--align('row',true);
  }

  &.cards--column{
    @include cards--align('column',true);
  }

}






/* RANDOM ARRANGEMENT */

.cards--random{
  
  $r: 25;

  .card {               transform: rotateZ(-20deg); }
  .card:nth-child(2n) { transform: rotateZ(-10deg); }
  .card:nth-child(3n) { transform: rotateZ(12deg); }
  .card:nth-child(5n) { transform: rotateZ(3deg); }


}




/**
 *  CARDS--FAN
 *  Arrange cards as a fan
 */

//will work only up to $fan-count cards
//keep iteration limits
$fan-count: 15;

//radius of fan curve
$fan-radius: 7em;

//angle range of the fan
$fan-range: 60deg;


.cards--fan{
  
  display: flex;
  
  //calculate offset angle to place cards standing up
  $angle-offset: -1 * ( 180deg - .5*$fan-range );
  
  //calculate position offset to keep cards aligned
  //we are ignoring x offset for the sake
  $cx: 0em; $cy: $fan-radius;

  //iterate up to $fan-count times
  //from $i to $n
  @for $n from 1 through $fan-count {
  @for $i from 1 through $n {
        
    //resolve angle for given index $i
    $angle-in-degs: decimal-round( $fan-range/$n * $i ) - $angle-offset;

    //convert to radians for math operations
    $angle-in-rads: rad($angle-in-degs);

    //resolve card offset based on calculated angle
    //$o-x: $cx + decimal-round( $fan-radius * ( $card-width * .5 / 1em ) * sin($angle-in-rads), 2);
    //$o-y: $cy + decimal-round( $fan-radius * ( $card-width * .5 / 1em ) * cos($angle-in-rads), 2);
    $o-x: $cx + decimal-round( $fan-radius * sin($angle-in-rads), 2);
    $o-y: $cy + decimal-round( $fan-radius * cos($angle-in-rads), 2);

    //$i  --> index from the start
    //$ii --> index from the end
    //using nth-child($i) + nth-last-child($ii) combination
    //we can target card indexes based on siblings quantity
    $ii: $n - $i;

    //apply transform for $i/$ii indexes
    .card:nth-of-type(#{$ii}):nth-last-of-type(#{$i}){
      //transform: translateX($o-x) translateY($o-y)  rotateZ(180deg - $angle-in-degs);
      transform: translateY($o-y) rotateZ(180deg - $angle-in-degs);
    }

    //invert indexes to support 'reverse' modifier
    &.cards--reverse{
      .card:nth-of-type(#{$i}):nth-last-of-type(#{$ii}) {
        //transform: translateX($o-x) translateY($o-y)  rotateZ(180deg - $angle-in-degs);
        transform: translateY($o-y)  rotateZ(180deg - $angle-in-degs);
      }
    }
      
  }
  }
  
}


.cards--overlap{

  $gutter: .5em;
  
  //default as .cards-row
  &:not(.cards--column):not(.cards--fan){
    .card{
      margin-left: -.5*$gutter;
      margin-right: -.5*$gutter;
    }
  }
  
  &.cards--column{
    .card{
      margin-top: -.75*$gutter;
      margin-bottom: -.75*$gutter;
    }
  }
  
  &.cards--fan{
    .card{
      margin-left: -.3*$gutter;
      margin-right: -.3*$gutter;
    }
  }
  
}



.cards--deck{
  
  display: flex;
  
  //hide all cards
  .card{
    display: none;
    /*
    margin-left: -.45em;
    margin-right: -.45em;
    */
  }
  
  //show only the first 5 cards
  .card:nth-last-child(-n+5){
    display: inline-block;
  }
  
  @for $i from 5 through 5 {
    .card:nth-last-child(-n+#{$i}){
      $o: $card-width - .5 - ($i * .02);
      margin-left: -1 * $o;
      margin-right: -1 * $o;
    }
  }

}