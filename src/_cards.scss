.cards{
  display: flex;
  @include noselect;
}

.cards,
.cards--row{

  align-items: center;
  justify-content: center;
  
  flex-direction: row;
  
  &.cards--align-left,
  &.cards--align-center-left{
    justify-content: flex-start;
    align-items: center;
  }
  
  &.cards--align-center,
  &.cards--align-center-center{
    justify-content: center;
    align-items: center;
  }
  &.cards--align-right,
  &.cards--align-center-right{
    justify-content: flex-end;
    align-items: center;
  }
  
  &.cards--align-top-left{
    justify-content: flex-start;
    align-items: flex-start;
  }
  &.cards--align-top,
  &.cards--align-top-center{
    justify-content: center;
    align-items: flex-start;
  }
  &.cards--align-top-right{
    justify-content: flex-end;
    align-items: flex-start;
  }
  
  &.cards--align-bottom-left{
    justify-content: flex-start;
    align-items: flex-end;
  }
  &.cards--align-bottom,
  &.cards--align-bottom-center{
    justify-content: center;
    align-items: flex-end;
  }
  &.cards--align-bottom-right{
    justify-content: flex-end;
    align-items: flex-end;
  }
  

}

.cards--column{
  
  flex-direction: column;
  
  &.cards--align-left,
  &.cards--align-center-left{
    align-items: flex-start;
    justify-content: center;
  }
  
  &.cards--align-center,
  &.cards--align-center-center{
    align-items: center;
    justify-content: center;
  }
  &.cards--align-right,
  &.cards--align-center-right{
    align-items: flex-end;
    justify-content: center;
  }
  
  &.cards--align-top-left{
    align-items: flex-start;
    justify-content: flex-start;
  }
  &.cards--align-top,
  &.cards--align-top-center{
    align-items: center;
    justify-content: flex-start;
  }
  &.cards--align-top-right{
    align-items: flex-end;
    justify-content: flex-start;
  }
  
  &.cards--align-bottom-left{
    align-items: flex-start;
    justify-content: flex-end;
  }
  &.cards--align-bottom,
  &.cards--align-bottom-center{
    align-items: center;
    justify-content: flex-end;
  }
  &.cards--align-bottom-right{
    align-items: flex-end;
    justify-content: flex-end;
  }
  

}



.cards--reverse{
  
  &:not(.cards--column){

    flex-direction: row-reverse;

    &.cards--align-left,
    &.cards--align-top-left,
    &.cards--align-center-left,
    &.cards--align-bottom-left{
      justify-content: flex-end;
    }
    
    &.cards--align-right,
    &.cards--align-top-right,
    &.cards--align-center-right,
    &.cards--align-bottom-right{
      justify-content: flex-start;
    }

  }

  &.cards--column{

    flex-direction: column-reverse;

    &.cards--align-top,
    &.cards--align-top-left,
    &.cards--align-top-center,
    &.cards--align-top-right{
      justify-content: flex-end;
    }

    &.cards--align-bottom,
    &.cards--align-bottom-left,
    &.cards--align-bottom-center,
    &.cards--align-bottom-right{
      justify-content: flex-start;
    }

  }

}






/* RANDOM ARRANGEMENT */

.cards--random{
  
  $len: 3;
  $r: 25;
  
  @for $i from 1 through $len {
    
    $rnd: random(2*$r) - $r;
    $angle: #{$rnd}deg;
    
    .card:nth-child(#{$len}n+#{$i}){
        transform: rotateZ($angle);
    }
    
  }

}




/**
 *  CARDS--FAN
 *  Arrange cards as a fan
 */

//will work only up to $fan-count cards
//keep iteration limits
$fan-count: 12;

//distance between cards
//negative value cause overlapping
$fan-gutter: $card-width * -.25;

//radius of fan curve
$fan-radius: 7em;

//angle range of the fan
$fan-range: 60deg;


.cards--fan{
  
  //calculate offset angle to place cards standing up
  $angle-offset: -1 * ( 180deg - .5*$fan-range );
  
  //calculate position offset to keep cards aligned
  //we are ignoring x offset for the sake
  $cx: 0em; $cy: $fan-radius;
    
  /*
  //apply gutter separator
  //also reset gutter for first card
  //or last card if reversed
  .card{ margin-left: $fan-gutter }
  &:not(.cards--reverse) .card:first-child{ margin-left: 0}
  &.cards--reverse .card:last-child{ margin-left: 0}
  */
  
  //iterate up to $fan-count times
  //from $i to $n
  @for $n from 1 through $fan-count {
  @for $i from 1 through $n {
        
    //resolve angle for given index $i
    $angle-in-degs: decimal-round( $fan-range/$n * $i ) - $angle-offset;

    //convert to radians for math operations
    $angle-in-rads: rad($angle-in-degs);

    //resolve card offset based on calculated angle
    //$o-x: $cx + decimal-round( $fan-radius * ( $card-width * .5 / 1em ) * sin($angle-in-rads), 2);
    //$o-y: $cy + decimal-round( $fan-radius * ( $card-width * .5 / 1em ) * cos($angle-in-rads), 2);
    $o-x: $cx + decimal-round( $fan-radius * sin($angle-in-rads), 2);
    $o-y: $cy + decimal-round( $fan-radius * cos($angle-in-rads), 2);

    //$i  --> index from the start
    //$ii --> index from the end
    //using nth-child($i) + nth-last-child($ii) combination
    //we can target card indexes based on siblings quantity
    $ii: $n - $i;

    //apply transform for $i/$ii indexes
    .card:nth-child(#{$ii}):nth-last-child(#{$i}){
      //transform: translateX($o-x) translateY($o-y)  rotateZ(180deg - $angle-in-degs);
      transform: translateY($o-y) rotateZ(180deg - $angle-in-degs);
    }

    //invert indexes to support reverse order
    &.cards--reverse{
      .card:nth-child(#{$i}):nth-last-child(#{$ii}) {
        //transform: translateX($o-x) translateY($o-y)  rotateZ(180deg - $angle-in-degs);
        transform: translateY($o-y)  rotateZ(180deg - $angle-in-degs);
      }
    }
      
  }
  }
  
}


.cards--overlap{

  $gutter: .5em;
  
  //default as .cards-row
  &:not(.cards--column):not(.cards--fan){
    .card{ margin-left: -1*$gutter }
    &:not(.cards--reverse) .card:first-child{ margin-left: 0}
    &.cards--reverse .card:last-child{ margin-left: 0}
  }
  
  &.cards--column{
    .card{ margin-top: -1.5*$gutter }
    &:not(.cards--reverse) .card:first-child{ margin-top: 0}
    &.cards--reverse .card:last-child{ margin-top: 0}
  }
  
  &.cards--fan{
    .card{ margin-left: -.5*$gutter }
    &:not(.cards--reverse) .card:first-child{ margin-left: 0}
    &.cards--reverse .card:last-child{ margin-left: 0}
  }
  
}